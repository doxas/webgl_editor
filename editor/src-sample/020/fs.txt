precision mediump float;

uniform mat4 invMatrix;
uniform vec3 lightDirection;
uniform vec3 eyePosition;
uniform vec3 centerPoint;
uniform vec4 modelColor;
varying vec3 vPosition;
varying vec3 vNormal;
varying vec4 vColor;

const float far = 35.0;
const float fogCoef = 1.0 / far;
const vec3  fogColor = vec3(0.0, 0.7, 0.7);

void main(){
	vec3 inverseLight = normalize(invMatrix * vec4(lightDirection, 1.0)).xyz;
	vec3 eyeDirection = eyePosition - centerPoint;
	vec3 inverseEye   = normalize(invMatrix * vec4(eyeDirection, 1.0)).xyz;
	vec3 halfLightEye = normalize(inverseLight + inverseEye);
	float diff =     clamp(dot(inverseLight, vNormal), 0.1, 1.0);
	float spec = pow(clamp(dot(halfLightEye, vNormal), 0.0, 1.0), 20.0);
	vec3  dest = vColor.rgb * diff * modelColor.rgb + spec;
	
	float fog = (eyePosition.z - vPosition.z) * fogCoef;
	vec3  mixColor = mix(dest, fogColor, fog);

	gl_FragColor = vec4(mixColor, vColor.a * modelColor.a);
}
